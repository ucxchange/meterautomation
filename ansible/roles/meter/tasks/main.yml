#  case $service {
#    true    : { $ensure_service = 'running' }
#    false   : { $ensure_service = 'stopped' }
#    default : { fail('service must be true or false') }
#  }
#
#  # just execute the meter - no service required
#  exec { "meter":
#    environment => "py_path=$(which python)",
#    command => "/bin/bash $py_path meter.py",
#    cwd => "${ucx_meter_location}",
#
#  # service management.
#  if ($service == true) {
#    # install service - windows
#    if $osfamily == 'windows' {
#      exec { "meter":
#        environment => "py_path=$(which python)",
#        command => "cmd $py_path setup.py",
#        cwd => "${ucx_meter_location}",
#        require => File["${ucx_meter_location}/cfg/${ucx_meter_config_file}"],
#      }
#    } else {
#      # install service - linux - put service file into? init.d?
#      # exec { "meter":
#      #    environment => "py_path=$(which python)",
#      #    command => "/bin/bash $py_path meter.py",
#      #    cwd => "${ucx_meter_location}",
#      #    require => File["${ucx_meter_location}/cfg/${ucx_meter_config_file}"],
#      # }
#      # cron the watchdog to ensure the service is running - linux only
#      # chkconfig?
#      cron { meter:
#        command => "${ucx_meter_location}/cfg/watchdog.sh",
#        user    => root,
#        hour    => 0,
#        minute  => 5
#      }
#    }

# == Class: ucx_meter
#
# UCX WAC Meter Puppet module.
#
# requires vcsrepo module
#         puppet module install puppetlabs-vcsrepo

#class ucx_meter (
#  $service        = false,
#  $enable         = true) {
#  include ucx_meter::params
#
#  # Import some variables from ucx_meter::params.
#  $ucx_meter_service_name = $ucx_meter::params::ucx_meter_service_name
#  $ucx_meter_location     = $ucx_meter::params::ucx_meter_location
#  $ucx_meter_config_file  = $ucx_meter::params::ucx_meter_config_file
#  $ucx_meter_user_name    = $ucx_meter::params::ucx_meter_user_name
#  $ucx_meter_group_name   = $ucx_meter::params::ucx_meter_group_name
#  $ucx_meter_infrastructure_name = $ucx_meter::params::ucx_meter_infrastructure_name
#
#  case $service {
#    true    : { $ensure_service = 'running' }
#    false   : { $ensure_service = 'stopped' }
#    default : { fail('service must be true or false') }
#  }




#
#  exec { "prereq python":
#    environment => "py_path=$(which python)",
#    command => "/bin/bash -c 'curl -o /tmp/ez_setup.py https://bootstrap.pypa.io/ez_setup.py; /usr/bin/python2.7 ez_setup.py;pip2 install psutil; pip2 install netifaces; sudo pip2 install py-cpuinfo'",
#    cwd => "/tmp",
#    require => File["${ucx_meter_location}/cfg/${ucx_meter_config_file}"],
#  }
#
#  # just execute the meter - no service required
#  exec { "meter":
#    environment => "py_path=$(which python)",
#    command => "/bin/bash -c 'pip install -r requirements.txt;${ucx_meter_location}/cfg/ucx-meter-service start'",
#    cwd => "${ucx_meter_location}",
#    require => Exec["prereq python"],
#  }
#
#  # service management.
#  if ($service == true) {
#    # install service - windows
#    if $osfamily == 'windows' {
#      exec { "meter":
#        environment => "py_path=$(which python)",
#        command => "cmd $py_path setup.py",
#        cwd => "${ucx_meter_location}",
#        require => File["${ucx_meter_location}/cfg/${ucx_meter_config_file}"],
#        provider => 'shell',
#      }
#    } else {
#      # install service - linux - put service file into? init.d?
#      # exec { "meter":
#      #    environment => "py_path=$(which python)",
#      #    command => "/bin/bash $py_path meter.py",
#      #    cwd => "${ucx_meter_location}",
#      #    require => File["${ucx_meter_location}/cfg/${ucx_meter_config_file}"],
#      # }
#      # cron the watchdog to ensure the service is running - linux only
#      # chkconfig?
#      cron { meter:
#        command => "${ucx_meter_location}/cfg/watchdog.sh",
#        user    => root,
#        hour    => 0,
#        minute  => 5
#      }
#    }
#
#    # first check for os - must be linux, not mac, not windows
##    file { '/etc/init.d/ucx_meter-service':
##      ensure => present,
##      source => "${ucx_meter_location}/cfg/${ucx_meter_service_name}",
##      require => Vcsrepo[$ucx_meter_location]
##    }
##
##    service { $ucx_meter_service_name:
##      ensure     => $ensure_service,
##      enable     => $enable,
##      hasrestart => true,
##      hasstatus  => true,
##      require    => File['/etc/init.d/ucx_meter-service'],
##    }
#  }
#}
## EOF

- name: Install list of packages
  apt: pkg={{item}} state=installed
  with_items:
       - git
       - python
       - python-pip
       - curl
       - python-dev

- debug: msg="{{ ucx_meter_location }}"

- name: Create meter path
  file: state=directory path={{ ucx_meter_location }} mode=0775

- name: pull the meter from source control
  git: repo=https://github.com/ucxchange/ucxmeter.git
        dest={{ ucx_meter_location }}
        accept_hostkey=yes
        force=yes
        version=prod

- name: ucxmeter chown
  command: /bin/chown -R ubuntu:ubuntu {{ ucx_meter_location }}

- name: ucxmeter service chmod
  file: path={{ ucx_meter_location }}/cfg/ucx-meter-service mode="u+x"

- name: runmeter chmod
  file: path={{ ucx_meter_location }}/cfg/run-meter mode="u+x"

- name: Create initial meter config
  template: src={{ item.file }}.j2 dest={{ ucx_meter_location }}/cfg/{{ ucx_meter_config_file }} mode={{ item.mode }}
  sudo: True
  with_items:
    - { file: 'conf/conf', mode: '0644' }

- name: prereq python1 - download ez-setup
  sudo: True
  command: /bin/bash -c 'curl -o /tmp/ez_setup.py https://bootstrap.pypa.io/ez_setup.py'

- name: prereq python2 - ez-setup
  sudo: True
  command: /bin/bash -c '/usr/bin/python2.7 /tmp/ez_setup.py'

- name: prereq python3 - psutil
  sudo: True
  command: /bin/bash -c 'pip2 install psutil'

- name: prereq python4 - netifaces
  sudo: True
  command: /bin/bash -c 'pip2 install netifaces'

- name: prereq python5 - cpuinfo
  sudo: True
  command: /bin/bash -c 'pip2 install py-cpuinfo'
#    environment => "py_path=$(which python)",
#    cwd => "/tmp",
#

#- name: prereq python6 - all other packages
#  sudo: True
#  command: /bin/bash -c 'pip2 install -r {{ ucx_meter_location }}/requirements.txt'


- name: execute ucxmeter
  sudo: True
  command: sudo /bin/bash -c '{{ ucx_meter_location }}/cfg/ucx-meter-service start &'

#    environment => "py_path=$(which python)",
#    cwd => "${ucx_meter_location}",
#    require => Exec["prereq python"],
#  }
