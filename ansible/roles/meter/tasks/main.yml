#  case $service {
#    true    : { $ensure_service = 'running' }
#    false   : { $ensure_service = 'stopped' }
#    default : { fail('service must be true or false') }
#  }
#
#  # just execute the meter - no service required
#  exec { "meter":
#    environment => "py_path=$(which python)",
#    command => "/bin/bash $py_path meter.py",
#    cwd => "${ucx_meter_location}",
#
#  # service management.
#  if ($service == true) {
#    # install service - windows
#    if $osfamily == 'windows' {
#      exec { "meter":
#        environment => "py_path=$(which python)",
#        command => "cmd $py_path setup.py",
#        cwd => "${ucx_meter_location}",
#        require => File["${ucx_meter_location}/cfg/${ucx_meter_config_file}"],
#      }
#    } else {
#      # install service - linux - put service file into? init.d?
#      # exec { "meter":
#      #    environment => "py_path=$(which python)",
#      #    command => "/bin/bash $py_path meter.py",
#      #    cwd => "${ucx_meter_location}",
#      #    require => File["${ucx_meter_location}/cfg/${ucx_meter_config_file}"],
#      # }
#      # cron the watchdog to ensure the service is running - linux only
#      # chkconfig?
#      cron { meter:
#        command => "${ucx_meter_location}/cfg/watchdog.sh",
#        user    => root,
#        hour    => 0,
#        minute  => 5
#      }
#    }

- name: Create meter path
  sudo: true
  file: state=directory path={{ ucx_meter_location }} mode=0775

  # pull the code from source control
#  vcsrepo { $ucx_meter_location:
#    source   => 'https://rtechts.git.cloudforge.com/meter.git',

- name: Create initial meter config
  template: src={{ item.file }}.j2 dest={{ ucx_meter_location }}/cfg/{{ ucx_meter_config_file }} mode={{ item.mode }}
  sudo: true
  with_items:
    - { file: 'conf/conf', mode: '0644' }
  notify:
    - restart meter



- name: Could not find httpd installed directories
  fail: msg="Could not find httpd directories"
  when: httpddir.stat.exists != True

- name: Install ModJK
  sudo: true
  file: state=link src="{{ ansible_local.modjk[modjk_version].installed_dir }}/mod_jk.so" path="{{ httpd_modules_dir }}/mod_jk.so"
  notify:
    - restart httpd

- name: Install httpd config
  template: src={{ item.file }}.j2 dest={{ httpd_conf_dir }}/httpd-{{ instance_name }}.conf mode={{ item.mode }}
  sudo: true
  with_items:
    - { file: 'conf/httpd.conf', mode: '0644' }
  notify:
    - restart httpd

- name: Install SSL certificates
  sudo: true
  synchronize: >
    src={{ instance_repo }}/{{ instance_name }}/ssl/ dest={{ httpd_conf_dir }}/ssl-{{ instance_name }}/ owner=no group=no
  notify:
    - restart httpd

- name: Install httpd init script
  sudo: true
  template: src={{ item.file }}.j2 dest=/etc/init.d/httpd-{{ instance_name }} mode={{ item.mode }}
  with_items:
    - { file: 'axeda-httpd', mode: '0755' }
  notify:
    - restart httpd

- name: Install binary link
  sudo: true
  file: state=link src=/usr/sbin/httpd path=/usr/sbin/httpd-{{ instance_name }}
  notify:
    - restart httpd

- name: Enable httpd service at boot and start
  sudo: true
  service: name=ucx-meter-service enabled=yes state=running